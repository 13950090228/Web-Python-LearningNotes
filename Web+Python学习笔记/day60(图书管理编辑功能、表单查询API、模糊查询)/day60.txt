day60
上节回顾：

ORM：

Python语法     sql
    
	类         表
    属性       字段
	对象       表记录

	
一 如何创建表

在models.py:
    class Food(models.Model):
          title=models.CharField(max_length=32)

执行数据库迁移命令：
    1 Python manage.py makemigrations
	2 python manage.py migrate
	
注意：必须在settings中的INSTALLED_APPS 注册models所在的app



二 对于表记录增删改查


	class Book(models.Model):
		nid=models.AutoField(primary_key=True)
		title=models.CharField(max_length=32)
		price=models.DecimalField(max_digits=8,decimal_places=2) # 999999.99
		pub_date=models.DateTimeField()  # "2012-12-12"
		publish=models.CharField(max_length=32)


    添加表的字段（举例）：
        price=models.DecimalField(max_digits=8,decimal_places=2,default=10)  #default 给一个默认值
        Python manage.py makemigrations  #再对数据库同步

    1 添加记录
	
    # 方式1：
	book=Book(title="python",price=123,pub_date="2012-12-12",publish="人民出版社")
    book.save()
	
	# 方式2:
	book=Book.objects.create(title="python",price=123,pub_date="2012-12-12",publish="人民出版社")
    print(book.title)
	
	2 查询记录
	
	book_list=Book.objects.all() # [book1,book2,book3]
	book_list=Book.objects.filter(price=100) # [book1,book2,book3]
    
	
	3 删除记录
	
	Book.objects.filter(price=100).delete()
	 
	4 修改记录
	  Book.objects.filter(nid=edit_book_id).update(price=111)
      Book.objects.filter(price=111).update(publish="南京出版社")
	
三 图书管理系统的请求流程给1汽车、kj
   (1)查看书籍：
   
	   请求url ：http://127.0.0.1:8000/books/
	   请求方式：GET
	   
	   
	   django的urls.py:
		   path('books/', views.books,name="books"),

	   执行books(request): 
		  1 查询所有书籍  
		  2 将查询的queryset数据传入模板，render渲染出一个books页面
		  3 返回给浏览器
		  
	   用户此时可以看到书籍的查看页面
    
   (2) 添加书籍
   
	   请求url ：http://127.0.0.1:8000/books/add/
	   请求方式：GET
	   
	   
	   django的urls.py:
		   path('books/add/', views.addbook),

	   执行addbook(request): 
		  if GET请求：
			   返回给浏览器一个提交书籍的表单页面
			   用户此时可以看到书籍的添加页面
		   
  	   ################ 
       用户输入数据，点击提交
		
	   请求url ：http://127.0.0.1:8000/books/add/
	   请求方式：POST
	   
	   
	   django的urls.py:
		   path('books/add/', views.addbook),

	   执行addbook(request): 
		  if GET请求：
			   返回给浏览器一个提交书籍的表单页面
			   用户此时可以看到书籍的添加页面
          else：
		       获取用户提交的数据，向数据库中添加一本书籍
			   返回一个重定向:/books/
 			   
      ################ 
       浏览器接收到重定向的响应：再发请求	    
		
	   请求url ：http://127.0.0.1:8000/books/
	   请求方式：GET
	   
	   django的urls.py:
		   path('books/', views.books,name="books"),

	   执行books(request): 
		  1 查询所有书籍 （此时查询的书籍包含刚刚添加的书籍） 
		  2 将查询的queryset数据传入模板，render渲染出一个books页面
		  3 返回给浏览器
		  
	   用户此时可以看到书籍的查看页面
      	  
    
   (3) 删除请求
       请求url ：http://127.0.0.1:8000/books/delete/5
	   请求方式：GET
	   
	   django的urls.py:
		   re_path('books/delete/(\d+)', views.delbook,name="books"),

	   执行delbook(request，5): 
		  1 查询主键为5的书籍删除
		  2 返回一个重定向:/books/
 			   
      ################ 
       浏览器接收到重定向的响应：再发请求	    
		
	   请求url ：http://127.0.0.1:8000/books/
	   请求方式：GET
	   
	   django的urls.py:
		   path('books/', views.books,name="books"),

	   执行books(request): 
		  1 查询所有书籍 （此时查询的书籍没有刚刚删除的书籍） 
		  2 将查询的queryset数据传入模板，render渲染出一个books页面
		  3 返回给浏览器
		  
	   用户此时可以看到书籍的查看页面
		  
	   
单表查询：
    查询API： 
    queryset
    
	(1) all() ：  调用者：objects管理器  返回queryset
	(2) filter() :调用者：objects管理器  返回queryset
    (3) get方法():调用者：objects管理器  返回查询到model对象 (注意：查询结果有且只有一个才执行)
	(4) first(),last()方法:调用者：queryset   返回model对象
	(5) exclude():调用者：objects管理器  返回queryset
	(6) order_by()：由queryset对象调用，返回值是queryset
    (7) count :数数  ：由queryset对象调用 返回int
    (8) reverse():由queryset对象调用,返回值是queryset
	(9) exists(): 由queryset对象调用 返回值布尔值
    (10)values()方法： 由queryset对象调用,返回值是queryset
    (11)values_list()：由queryset对象调用,返回值是queryset
    (12)distinct(): 由queryset对象调用,返回值是queryset
    
	
	模糊查询（双下划线）
	    Book.objects.filter(price__in=[100,200,300])
		Book.objects.filter(price__gt=100)
		Book.objects.filter(price__lt=100)
		Book.objects.filter(price__range=[100,200])
		Book.objects.filter(title__contains="python")
		Book.objects.filter(title__icontains="python")
		Book.objects.filter(title__startswith="py")
		Book.objects.filter(pub_date__year=2012)
	
	
https://www.cnblogs.com/yuanchenqi/articles/8963244.html	
"""
    注意：querySet和model的区别
    """
    #===================单表查询=======================
    #1 all() 方法
    # ret = Book.objects.all()
    # print(ret)  #<QuerySet [<Book: python语言程序设计>, <Book: GO语言入门>, ....

    #2 filter() 方法
    # ret = Book.objects.filter(price=100)
    # print(ret)

    #3 get方法：返回查询到的model对象  只能查询到一个
    # ret = Book.objects.get(title='金瓶梅')
    # print(ret)

    #4 first() last() 方法 queryset调用，返回的是model对象
    # fbook = Book.objects.all()[0]
    # fbook = Book.objects.all().first()   #上等同于下
    # lbook = Book.objects.all().last()

    #5 exclude() 方法 返回一个queryset
    # ret = Book.objects.exclude(publish="北京出版社")
    # print(ret)

    #6 order_by:排序  由queryset调用 返回queryset
    # ret = Book.objects.all().order_by('price','id')  #第二个参数是对第一个相同的排序
    # ret = Book.objects.all().order_by('-price').first()  #加 - 代表降序
    # print(ret)

    #7 count:数数  由queryset对象调用 返回int类型
    # ret = Book.objects.all().count()
    # print(ret)
    # return HttpResponse('ok')

    #8 reverse():翻转  由queryset调用 返回queryset
    # ret = Book.objects.all().reverse()

    #9 exists() :判断是否有记录
    # ret = Book.objects.all().exists()

    #10  value() 方法  queryset:[{title:'xxx'},{title:'xxx'}]
    # ret = Book.objects.all().values("title")  #queryset:[{title:'xxx'},{title:'xxx'}]
    """
    ret=[]
    for obj in Book.object.all():
        temp={
            "title":obj.title
        }
        ret.append(temp)
    """

    #11 value_list() 方法  queryset:[('xxx'),('xxx'),('xxx')]
    # ret = Book.objects.values_list('title','price')
    # print(ret)

    #12 distinct() 方法 不能对对象去重所以不能直接用在all()后面
    # ret = Book.objects.all().values('publish').distinct()
    # print(ret)

    # ===================模糊查询=======================
    #查询价格大于100的书籍  #<QuerySet [<Book: 金瓶梅>, <Book: 肉蒲团>]>
    # ret = Book.objects.filter(price__gt=100)  # 大于
    # ret = Book.objects.filter(price__lt=100)  # 小于
    # ret = Book.objects.filter(price__gte=100)  # 大于等于
    # ret = Book.objects.filter(price__lte=100)  # 小于等于

    #查询以py开头的书籍名称  #<QuerySet [{'title': 'python语言程序设计'}, {'title': 'python爬虫实战'}]>
    # ret = Book.objects.filter(title__startswith='py').values('title')  #istartswith 不区分大小写

    # 查询包含p的书籍名称
    # ret = Book.objects.filter(title__contains='p').values('title') #icontains不区分大小写

    # 查询年份为2019 月份为11的数据
    # ret = Book.objects.filter(pub_date__year=2019,pub_date__month=11)
    # print(ret)




ORM

ORM多表

Django组件


1 AJAX 上传文件
2 cookie sesseion 用户认证组件
3 中间件 form组件

crm(权限+crm)

####################

路飞项目
   vue (一周)
   DRF (一周)
   路飞(一周)
flask
   





















