day61 上节回顾


作业：
    1 查询老男孩出版社出版过的价格大于200的书籍
       Book.objects.filter(publish="老男孩出版社",price__gt=200)
	   
	2 查询2017年8月出版的所有以py开头的书籍名称
	  Book.objects.filter(pub_date__year=2017,pub_date__month=8,title__startswith="py")
	  
	3 查询价格为50,100或者150的所有书籍名称及其出版社名称
	  Book.objects.filter(price__in=[50,100,150]).values("title","publish")
	  # [{},{}]
	  
	4 查询价格在100到200之间的所有书籍名称及其价格
	  Book.objects.filter(price__range=[100,200]).values("title","price")
	  
	5 查询所有人民出版社出版的书籍的价格（从高到低排序，去重）
      Book.objects.filter(publish="人民出版社").order_by("-prcie").values("price").distinct() 
      [obj3,obj1,obj2]----->[{"prcie":200},{"prcie":100}]
	  
	  
多表操作
    
	表与表之间的关系
	    1 一对多
		        单表操作：
		        class Book(models.Model):
					title=models.CharField(max_length=32)
					publish=models.CharField(max_length=32)
					publish_email=models.CharField(max_length=32)
					publish_addr=models.CharField(max_length=32)
					
					
				Book

                     title    publish_name   publish_email  publish_addr	 	 		
			         python    人民出版社     123               beijing
			         linux     人民出版社     123               beijing
					 go        人民出版社     123               beijing
                
				
				#####################
				
				
				Book  
				    title    publish_id
					python       1
					go           1
				
				
				Publish 
				  id    name          addr        email
				   1   人民出版社     beijing      123
				   2   北京出版社     beijing      234
 					
				KEY： 必须在"多"的表中创建关联字段,外加约束
				
				'''
				    create table book(
					     title  varchar(30),
						 publish_id INT,
						 foreignKey publish_id references Publish(id)
						 
					)
				
				'''
				
				
		2 一对一
		    Author
			
			  name     age   ad_id(唯一约束)  
			  alex     12      1 
			  egon     23      1 
			
			
		    AuthorDetail
			 id    gender   tel   gf    addr
			  1    male    110   铁锤   山东
		      2    male    991   钢弹   山东
			  
			
            KEY：在任意表中加关联字段，唯一约束
			
			
			
			
		3 多对多
		    Book

				Book  
			id	title    publish_id
			1	python       1
			2	go           1
		    
		    Author
			
			 id   name     age   ad_id(唯一约束)  
			  1   alex     12      1 
			  
    
            
			KEY：创建第三张表
			
			
			Book2Author
			   id   book_id   author_id
			    1     1          1
				2     1          2
			    3     2          2

	  
##########################



class Book(models.Model):
    nid=models.AutoField(primary_key=True)
    title=models.CharField(max_length=32)
    price=models.DecimalField(max_digits=8,decimal_places=2) # 999999.99
    pub_date=models.DateTimeField()  # "2012-12-12"
    publish=models.ForeignKey(to="Publish",on_delete=models.CASCADE)  # 级联删除
    authors=models.ManyToManyField(to="Author")
    def __str__(self):
        return self.title


class Publish(models.Model):
    nid = models.AutoField(primary_key=True)
    name=models.CharField(max_length=32)
    email=models.CharField(max_length=32)


class Author(models.Model):
    nid = models.AutoField(primary_key=True)
    name=models.CharField(max_length=32)
    age=models.IntegerField()
    email=models.CharField(max_length=32)
    ad=models.OneToOneField(to="AuthorDetail",on_delete=models.CASCADE)


class AuthorDetail(models.Model):
    addr=models.CharField(max_length=32)
    tel=models.IntegerField()
    #author=models.OneToOneField("Author",on_delete=models.CASCADE)
	
	
	
	
# 添加记录
    


# 查询记录
    1 跨表查询
	    --- 基于对象
		--- 基于双下环线
	2 分组查询
	
	3 F与Q查询
	
	
	












	  
	  
	  